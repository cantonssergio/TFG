#pragma kernel GenerateSpawnData
#pragma kernel UpdateDropletPosition
#pragma kernel CalcDensity
#pragma kernel CalcPressure
#pragma kernel CalcViscosity

// Buffers que almacenan todas las gotas
RWStructuredBuffer<float3> dropletsPosition;
RWStructuredBuffer<float3> dropletsVelocity;
RWStructuredBuffer<float> dropletsDensity;
RWStructuredBuffer<float> dropletsNearDensity;

float2 spawnSize;
float3 limitSize;
float3 spawnCentre;
float smoothingRadius;
float initialVelocityMagnitude;
float pressureMultiplier;
uint numDroplets;
float targetDensity;
float nearPressureMultiplier;
float gravity;
float deltaTime;
float collisionDampling;
float viscosityMultiplier;


static const float pi = 3.14159265359f;

[numthreads(16, 16, 1)]
void GenerateSpawnData(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x + id.y * 16 * 16;
    if (index >= numDroplets)
        return;

    int numX = (int)ceil(sqrt(spawnSize.x / spawnSize.y * numDroplets));
    int numY = (int)ceil(numDroplets / (float)numX);

    int x = index % numX;
    int y = index / numX;

    float tx = numX <= 1 ? 0.5f : x / (float)(numX - 1);
    float ty = numY <= 1 ? 0.5f : y / (float)(numY - 1);

    float3 position = float3((tx - 0.5f) * spawnSize.x, (ty - 0.5f) * spawnSize.y, 0) + spawnCentre;
    float3 velocity = float3(0, -1, 0) * initialVelocityMagnitude;

    dropletsPosition[index] = position;
    dropletsVelocity[index] = velocity;
}

float Poly6Kernel(float distance)
{
    if (distance <= smoothingRadius){
        float k = 315 / (64 * pi * pow(smoothingRadius, 9));
	    float v = smoothingRadius * smoothingRadius - distance * distance;
		return v * v * v * k;
    } else return 0;
}

float SpikyKernel(float distance)
{
    if (distance < smoothingRadius){

        float r = 2*distance/smoothingRadius -1;
        float k = 15 / (pi * pow(smoothingRadius, 6));
        float v = smoothingRadius - r;
        return k * v * v * v;
    } else return 0;
}

float SpikyKernelPow2(float distance)
{
    if (distance < smoothingRadius){
		float k = 15 / (2 * pi * pow(smoothingRadius, 5));
		float v = smoothingRadius - distance;
		return v * v * k;
    } else return 0;
}

float SpikyKernelPow3(float distance)
{
    if (distance < smoothingRadius){
	float k = 15 / (pi * pow(smoothingRadius, 6));
	float v = smoothingRadius - distance;
	return v * v * v * k;
    } else return 0;
}

float SpikyKernelDerivative(float distance)
{
    
    if (distance < smoothingRadius) return 0.0f;
    float r = 2*distance/smoothingRadius -1;
    float k = 15 / (pi * pow(smoothingRadius, 6));
    float v = smoothingRadius - r;
    return -3 * k * v * v;
}

float DerivativeSpikyPow2(float distance)
{
    if (distance < smoothingRadius){
        float k = 15 / (pow(smoothingRadius, 5) * pi);
        float v = smoothingRadius - distance;
        return -v * k;
    } else return 0;
}

float DerivativeSpikyPow3(float distance)
{
    if (distance < smoothingRadius){
        float k = 45 / (pow(smoothingRadius, 6) * pi);
        float v = smoothingRadius - distance;
        return -v * v * k;
     } else return 0;

}

float vkernel(float distance){
    if (distance < smoothingRadius){

        float k = 15 / (2 * pi * pow(smoothingRadius, 3));
        return - pow(distance, 3)/2*pow(smoothingRadius,3) + distance*distance/(smoothingRadius*smoothingRadius) + smoothingRadius/(2*distance)-1;

    } else return 0;
}

float ViscosityKernel(float distance){
    return Poly6Kernel(distance);
}

float DensityKernel(float distance){
    return Poly6Kernel(distance);
}

float DensityDerivativeKernel(float distance){
    return DerivativeSpikyPow2(distance);
}

float NearDensityKernel(float distance){
    return SpikyKernelPow3(distance);
}

float NearDensityDerivativeKernel(float distance){
    return DerivativeSpikyPow3(distance);
}

void CheckLimits(uint dropletIndex)
{
    float3 pos = dropletsPosition[dropletIndex];
    float3 vel = dropletsVelocity[dropletIndex];

    const float3 halfSize = limitSize * 0.5f;
    float3 minBounds = spawnCentre - halfSize;
    float3 maxBounds = spawnCentre + halfSize;

    const float epsilon = 0.0001f; // Tolerancia numÃ©rica

    for (int i = 0; i < 3; i++) // Ejes X, Y, Z
    {
        if (pos[i] < minBounds[i] - epsilon)
        {
            float penetration = minBounds[i] - pos[i];
            pos[i] = minBounds[i] + penetration;
            vel[i] *= -collisionDampling;
        }
        else if (pos[i] > maxBounds[i] + epsilon)
        {
            float penetration = pos[i] - maxBounds[i];
            pos[i] = maxBounds[i] - penetration;
            vel[i] *= -collisionDampling;
        }
    }

    dropletsPosition[dropletIndex] = pos;
    dropletsVelocity[dropletIndex] = vel;
}


[numthreads(64, 1, 1)]
void CalcDensity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numDroplets) return;

    float3 droplet = dropletsPosition[id.x];
    float density = 0;
    float nearDensity = 0;

    for (int i = 0; i < numDroplets; i++)
    {
        if (i != id.x)
        {
            float dist = distance(dropletsPosition[id.x], dropletsPosition[i]);
            if (dist <= smoothingRadius)
            {
                density += DensityKernel(dist);
                nearDensity += NearDensityKernel(dist);
            }
        }
    }

    dropletsDensity[id.x] = density;
    dropletsNearDensity[id.x] = nearDensity;
}
float PressureFromDensity(float density)
{
	return (density - targetDensity) * pressureMultiplier;
}
float NearPressureFromDensity(float nearDensity)
{
	return nearDensity * nearPressureMultiplier;
}

[numthreads(64, 1, 1)]
void CalcPressure(uint3 id : SV_DispatchThreadID)
{
    float3 pForce = float3(0, 0, 0);
    float density = dropletsDensity[id.x];
    float pressure = PressureFromDensity(density);

    float nearDensity = dropletsNearDensity[id.x];
    float nearPressure = NearPressureFromDensity(nearDensity);

    for (int i = 0; i < numDroplets; i++)
    {
        if (i != id.x)
        {
            float dist = distance(dropletsPosition[id.x], dropletsPosition[i]);
            float3 direction = dist > 0 ? (dropletsPosition[i] - dropletsPosition[id.x]) / dist : float3(0, 1, 0);
            if (dist <= smoothingRadius)
            {
                float densitySecondDropplet = dropletsDensity[i];
                float densityNearSecondDropplet = dropletsNearDensity[i];

                float pressureSecondDropplet = PressureFromDensity(densitySecondDropplet);
                float pressureNearSecondDroplet = NearPressureFromDensity(densityNearSecondDropplet);

                float sharedPressure = (pressure + pressureSecondDropplet) / 2.0;
                float sharedNearPressure = (nearDensity + pressureNearSecondDroplet) / 2.0;
                
                pForce += DensityDerivativeKernel(dist) * direction * sharedPressure / densitySecondDropplet;
                pForce += NearDensityDerivativeKernel(dist) * direction * sharedNearPressure / densityNearSecondDropplet;
            }
        }
    }
    dropletsVelocity[id.x] += (pForce / density) * deltaTime; 
}

[numthreads(64, 1, 1)]
void CalcViscosity(uint3 id : SV_DispatchThreadID){
    float3 vForce = float3(0,0,0);
    for (int i = 0; i < numDroplets; i++)
    {
        if (i != id.x)
        {
            float dist = distance(dropletsPosition[id.x], dropletsPosition[i]);
            float3 direction = dist > 0 ? (dropletsPosition[i] - dropletsPosition[id.x]) / dist : float3(0, 1, 0);
            if (dist <= smoothingRadius)
            {
                vForce += (dropletsVelocity[i] - dropletsVelocity[id.x]) * ViscosityKernel(dist);
            }
        }
    }
   dropletsVelocity[id.x] += vForce * viscosityMultiplier*deltaTime;

}

[numthreads(64, 1, 1)]
void UpdateDropletPosition(uint3 id : SV_DispatchThreadID)
{
    if (id.x < numDroplets){
        dropletsVelocity[id.x] -= float3(0, gravity, 0) * deltaTime;
        dropletsPosition[id.x] += dropletsVelocity[id.x] * deltaTime;
        CheckLimits(id.x);
    }
}
